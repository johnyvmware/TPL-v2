name: CI - Build, Test & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-test-coverage:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests with coverage
      run: |
        dotnet test --configuration Release --no-build --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/ \
          --logger trx \
          --settings coverlet.runsettings
      
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/Coverage -reporttypes:HtmlInline_AzurePipelines
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_number }}
        path: TestResults/Coverage/
        retention-days: 30
        
    - name: Coverage summary
      run: |
        echo "## � Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract coverage percentage from cobertura report
        coverage_file=$(find TestResults -name "coverage.cobertura.xml" | head -1)
        if [ -f "$coverage_file" ]; then
          coverage_percentage=$(grep -o 'line-rate="[^"]*"' "$coverage_file" | head -1 | cut -d'"' -f2)
          coverage_percentage=$(echo "$coverage_percentage * 100" | bc)
          coverage_percentage=${coverage_percentage%.*}
          
          echo "**Overall Coverage:** ${coverage_percentage}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$coverage_percentage" -ge 80 ]; then
            echo "✅ Great! Coverage is above 80%" >> $GITHUB_STEP_SUMMARY
          elif [ "$coverage_percentage" -ge 60 ]; then
            echo "⚠️  Coverage is moderate (60-80%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage is below 60% - consider adding more tests" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ Could not find coverage report" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ github.run_number }}
        path: TestResults/
        retention-days: 7