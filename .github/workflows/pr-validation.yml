name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate:
    name: Build, Test & Security
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests
      run: |
        dotnet test --configuration Release --no-build --verbosity normal \
          --logger trx --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings
      
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
        
    - name: Code coverage
      uses: codecov/codecov-action@v5
      if: always()
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_MANDI }}
        
    - name: Security scan
      run: |
        echo "üîç Scanning for vulnerabilities..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "‚ùå Security vulnerabilities found!"
          cat security-scan.log
          exit 1
        fi
        echo "‚úÖ No security vulnerabilities found"
        
    - name: Code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ github.event.number }}
        path: |
          TestResults/
          security-scan.log
        retention-days: 3