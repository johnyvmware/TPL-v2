name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate:
    name: Build, Test & Security
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests
      run: |
        dotnet test --configuration Release --no-build --verbosity normal \
          --logger trx --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings
      
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
        
    - name: Code coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Security scan
      run: |
        echo "🔍 Scanning for vulnerabilities..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "❌ Security vulnerabilities found!"
          cat security-scan.log
          exit 1
        fi
        echo "✅ No security vulnerabilities found"
        
    - name: Code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ github.event.number }}
        path: |
          TestResults/
          security-scan.log
        retention-days: 3

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate solution structure
      run: |
        echo "📁 Validating project structure..."
        required_files=(
          "TransactionProcessingSystem.sln"
          "src/TransactionProcessingSystem/TransactionProcessingSystem.csproj"
          "tests/TransactionProcessingSystem.Tests/TransactionProcessingSystem.Tests.csproj"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          fi
        done
        echo "✅ Project structure validated"
        
    - name: Validate commit messages
      run: |
        echo "📝 Validating commit messages..."
        commits=$(git log --pretty=format:"%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        conventional_pattern="^(feat|fix|docs|style|refactor|test|chore|build|ci|perf|revert)(\(.+\))?: .+"
        
        invalid_commits=0
        while IFS= read -r commit_msg; do
          if [[ ! $commit_msg =~ $conventional_pattern ]]; then
            echo "❌ Invalid commit: '$commit_msg'"
            echo "💡 Use format: type(scope): description"
            invalid_commits=$((invalid_commits + 1))
          fi
        done <<< "$commits"
        
        if [ $invalid_commits -gt 0 ]; then
          echo "❌ Found $invalid_commits invalid commit message(s)"
          echo "📖 See: https://www.conventionalcommits.org/"
          exit 1
        fi
        echo "✅ All commit messages valid"
        
    - name: Dependency review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        
    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}