name: Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [ "${{ github.event_name }}" = "push" ]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease (contains alpha, beta, rc, etc.)
        if [[ $VERSION =~ -(alpha|beta|rc|preview) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "📦 Release version: $VERSION"
        echo "🚀 Is prerelease: $([ "$IS_PRERELEASE" = "true" ] && echo "Yes" || echo "No")"
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Build release
      run: dotnet build --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity minimal

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    
    strategy:
      matrix:
        runtime: [linux-x64, win-x64, osx-x64]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore --verbosity minimal
      
    - name: Publish for ${{ matrix.runtime }}
      run: |
        dotnet publish src/TransactionProcessingSystem/TransactionProcessingSystem.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          --verbosity minimal \
          /p:PublishTrimmed=true \
          /p:PublishSingleFile=true \
          /p:Version=${{ needs.validate-release.outputs.version }}
          
    - name: Create deployment package
      run: |
        cd ./publish/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == "win-x64" ]]; then
          zip -r "../../transaction-processor-${{ needs.validate-release.outputs.version }}-${{ matrix.runtime }}.zip" .
        else
          tar -czf "../../transaction-processor-${{ needs.validate-release.outputs.version }}-${{ matrix.runtime }}.tar.gz" .
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.runtime }}-${{ needs.validate-release.outputs.version }}
        path: |
          transaction-processor-${{ needs.validate-release.outputs.version }}-${{ matrix.runtime }}.*
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-*-${{ needs.validate-release.outputs.version }}
        merge-multiple: true
        
    - name: Generate release notes
      id: release-notes
      run: |
        echo "Generating release notes..."
        
        # Get previous tag for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "📋 Changes since $PREVIOUS_TAG:" > release-notes.md
          echo "" >> release-notes.md
          
          # Get commits since last tag
          git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> release-notes.md
        else
          echo "🚀 Initial release" > release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## 📦 Downloads" >> release-notes.md
        echo "" >> release-notes.md
        echo "Choose the appropriate package for your platform:" >> release-notes.md
        echo "- **Linux x64**: \`transaction-processor-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz\`" >> release-notes.md
        echo "- **Windows x64**: \`transaction-processor-${{ needs.validate-release.outputs.version }}-win-x64.zip\`" >> release-notes.md
        echo "- **macOS x64**: \`transaction-processor-${{ needs.validate-release.outputs.version }}-osx-x64.tar.gz\`" >> release-notes.md
        
        cat release-notes.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        draft: false
        files: |
          transaction-processor-*.tar.gz
          transaction-processor-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging') ||
      (github.event_name == 'push' && needs.validate-release.outputs.is-prerelease == 'true')
    environment:
      name: staging
      url: https://staging.example.com
      
    steps:
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-linux-x64-${{ needs.validate-release.outputs.version }}
        
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying version ${{ needs.validate-release.outputs.version }} to staging..."
        
        # Extract deployment package
        tar -xzf transaction-processor-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz
        
        # Simulate deployment steps
        echo "✅ Application deployed to staging environment"
        echo "🔗 Staging URL: https://staging.example.com"
        
        # Health check
        echo "🏥 Running health checks..."
        # Add actual health check commands here
        echo "✅ Health checks passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts, deploy-staging]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      (github.event_name == 'release' && github.event.action == 'published' && needs.validate-release.outputs.is-prerelease == 'false')
    environment:
      name: production
      url: https://app.example.com
      
    steps:
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-linux-x64-${{ needs.validate-release.outputs.version }}
        
    - name: Pre-deployment validation
      run: |
        echo "🔍 Running pre-deployment validation..."
        
        # Validate artifact integrity
        if [ ! -f "transaction-processor-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz" ]; then
          echo "❌ Deployment artifact not found!"
          exit 1
        fi
        
        echo "✅ Pre-deployment validation passed"
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying version ${{ needs.validate-release.outputs.version }} to production..."
        
        # Extract deployment package
        tar -xzf transaction-processor-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz
        
        # Simulate blue-green deployment
        echo "🔄 Initiating blue-green deployment..."
        echo "✅ Application deployed to production environment"
        echo "🔗 Production URL: https://app.example.com"
        
    - name: Post-deployment validation
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        # Add actual production health checks here
        # Example: curl -f https://app.example.com/health
        
        echo "✅ Production deployment successful!"
        echo "📊 Monitoring dashboards: https://monitoring.example.com"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-production]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'failure')
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "✅ Deployment successful!"
          echo "🎉 Version ${{ needs.validate-release.outputs.version }} is now live in production"
        else
          echo "❌ Deployment failed!"
          echo "🚨 Manual intervention may be required"
        fi
        
        # Add actual notification logic here (Slack, email, etc.)
        echo "📧 Deployment notifications sent"